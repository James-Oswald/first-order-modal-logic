--This is a revision of 1.6 to not use dependent type nonsense

import src.LogicSymbolOverloads
import src.util

inductive PMF where
| Atom : String -> PMF
| And : PMF -> PMF -> PMF
| Or : PMF -> PMF -> PMF
| Not : PMF -> PMF
| Implies : PMF -> PMF -> PMF
| Iff : PMF -> PMF -> PMF
| Box : PMF -> PMF
| Diamond : PMF -> PMF

instance : Land PMF := ‚ü®PMF.And‚ü©
instance : Lor PMF := ‚ü®PMF.Or‚ü©
instance : Lif PMF := ‚ü®PMF.Implies‚ü©
instance : Liff PMF := ‚ü®PMF.Iff‚ü©
instance : Lnot PMF := ‚ü®PMF.Not‚ü©
instance : Box PMF := ‚ü®PMF.Box‚ü©
instance : Diamond PMF := ‚ü®PMF.Diamond‚ü©

structure Frame where
  ‚Ñê : Type --possible worlds
  ‚Ñõ : ‚Ñê -> ‚Ñê -> Prop -- accessibility relation
  --‚Ñê_nonempty : Nonempty ‚Ñê --Textbook says this, not sure we will need it

structure Model where
  ‚Ñ± : Frame
  ùíØ : ‚Ñ±.‚Ñê -> String -> Prop --Truth at a world


/-
Extension of truth of an atom at world to truth of formulae at a world
Takes a dependent pair of a model and a world and a formula and returns if
the formula is true at the world
Actual use of a dependent sigma pair type: (‚Ñ≥ : Model) √ó ‚Ñ≥.‚Ñ±.‚Ñê
-/
def val (‚Ñ≥ : Model) (Œì : ‚Ñ≥.‚Ñ±.‚Ñê) (œï : PMF) : Prop :=
match œï with
| PMF.Atom a => ‚Ñ≥.ùíØ Œì a
| PMF.And œÜ œà => val ‚Ñ≥ Œì œÜ ‚àß val ‚Ñ≥ Œì œà
| PMF.Or œÜ œà => val ‚Ñ≥ Œì œÜ ‚à® val ‚Ñ≥ Œì œà
| PMF.Not œÜ => ¬¨val ‚Ñ≥ Œì œÜ
| PMF.Implies œÜ œà => val ‚Ñ≥ Œì œÜ ‚Üí val ‚Ñ≥ Œì œà
| PMF.Iff œÜ œà => val ‚Ñ≥ Œì œÜ ‚Üî val ‚Ñ≥ Œì œà
| PMF.Box œÜ => ‚àÄ(Œì' : ‚Ñ≥.‚Ñ±.‚Ñê), ‚Ñ≥.‚Ñ±.‚Ñõ Œì Œì' ‚Üí val ‚Ñ≥ Œì' œÜ
| PMF.Diamond œÜ => ‚àÉ(Œì' : ‚Ñ≥.‚Ñ±.‚Ñê), ‚Ñ≥.‚Ñ±.‚Ñõ Œì Œì' ‚àß val ‚Ñ≥ Œì' œÜ

--#check (‚Ñ≥ : Model) √ó ‚Ñ≥.‚Ñ±.‚Ñê

--Model World Pair type alias
def MWP := (‚Ñ≥ : Model) √ó ‚Ñ≥.‚Ñ±.‚Ñê

instance : Forces ((‚Ñ≥ : Model) √ó ‚Ñ≥.‚Ñ±.‚Ñê) PMF := ‚ü®Œª‚Ñ≥x‚Ñê œÜ => val ‚Ñ≥x‚Ñê.fst ‚Ñ≥x‚Ñê.snd œÜ‚ü©

--Exersises
/-
1.6.1: Show that at every possible world Œì of a model model
Œì ‚ä© (‚ñ°X ‚â° ¬¨‚óá¬¨X) and Œì ‚ä© (‚óáX ‚â° ¬¨‚ñ°¬¨X)
-/
example (‚Ñ≥ : Model) (Œì : ‚Ñ≥.‚Ñ±.‚Ñê) (X : PMF):
(‚ü®‚Ñ≥, Œì‚ü© : MWP) ‚ä© ‚ñ°X ‚â° ¬¨‚ãÑ¬¨X := by
  simp [Forces.forces, val]
  apply Iff.intro
  . intro H
    intro ‚ü®w, H2‚ü©
    have H3 := H w H2.left
    have H4 := H2.right
    contradiction
  . intros H w1 H2
    apply Classical.byContradiction
    intro H3
    simp [Not] at H
    apply H
    exact ‚ü®w1, ‚ü®H2, H3‚ü©‚ü©

/-
Exersize 1.6.2
Show that if a world Œì of a model has no
worlds accessable to it, than at Œì every formula is nec but none are possible
-/
example (‚Ñ≥ : Model) (Œì : ‚Ñ≥.‚Ñ±.‚Ñê) (X : PMF):
(‚ü®‚Ñ≥, Œì‚ü© : MWP) ‚ä© ‚ãÑX ‚â° ¬¨‚ñ°¬¨X := by
  simp [Forces.forces, val]
  apply Iff.intro
  . intro ‚ü®w, H‚ü© H2
    have H3 := H2 w H.left
    have H4 := H.right
    contradiction
  . intros H
    rw [forallneg] at H
    have ‚ü®w, H2‚ü© := H
    exists w
    apply notimpnot
    assumption

example  (‚Ñ≥ : Model) (Œì: ‚Ñ≥.‚Ñ±.‚Ñê) (œï : PMF):
(‚àÄ(Œì' : ‚Ñ≥.‚Ñ±.‚Ñê), ¬¨‚Ñ≥.‚Ñ±.‚Ñõ Œì Œì') -> ((‚ü®‚Ñ≥, Œì‚ü© : MWP) ‚ä© ‚ñ°œï) ‚àß ((‚ü®‚Ñ≥, Œì‚ü© : MWP) ‚ä© ¬¨‚ãÑœï) := by
  simp [Forces.forces, val]
  intro H
  apply And.intro
  case left =>
    intro Œì'' H2
    have := H Œì''
    contradiction
  case right =>
    intro ‚ü®w, H2‚ü©
    have := H2.left
    have := H w
    contradiction
